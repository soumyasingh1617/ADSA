Rotting Oranges.

#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int orangesRotting(vector<vector<int>>& grid) {
    int rows = grid.size(), cols = grid[0].size();
    queue<pair<int, int>> q;
    int fresh = 0, time = 0;
    for(int i = 0; i < rows; ++i)
        for(int j = 0; j < cols; ++j)
            if(grid[i][j] == 2)
                q.push({i, j});
            else if(grid[i][j] == 1)
                fresh++;
    vector<int> dir = {-1, 0, 1, 0, -1};
    while(!q.empty() && fresh > 0) {
        int sz = q.size();
        while(sz--) {
            auto [x, y] = q.front(); q.pop();
            for(int d = 0; d < 4; ++d) {
                int nx = x + dir[d], ny = y + dir[d+1];
                if(nx >= 0 && ny >= 0 && nx < rows && ny < cols && grid[nx][ny] == 1) {
                    grid[nx][ny] = 2;
                    q.push({nx, ny});
                    fresh--;
                }
            }
        }
        time++;
    }
    return fresh == 0 ? time : -1;
}
int main() {
    vector<vector<int>> grid = {{2,1,1},{1,1,0},{0,1,1}};
    cout << orangesRotting(grid) << endl;
    return 0;
}
